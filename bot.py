import discord
from discord.ext import commands
from discord.ui import Button, View
import os

# Definicje Intents i Bota (bez zmian)
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix='!', intents=intents)

# --- NOWO≈öƒÜ: Klasa z naszym przyciskiem weryfikacyjnym ---
class VerificationView(View):
    def __init__(self):
        # Ustawiamy timeout=None, aby przyciski dzia≈Ça≈Çy nawet po restarcie bota
        super().__init__(timeout=None) 

    @discord.ui.button(label="‚úÖ Zweryfikuj!", style=discord.ButtonStyle.green, custom_id="verification_button")
    async def verify_button_callback(self, interaction: discord.Interaction, button: Button):
        # 1. Znajd≈∫ rolƒô "Zweryfikowany" na serwerze
        role = discord.utils.get(interaction.guild.roles, name="Zweryfikowany")
        
        if role is None:
            # Je≈õli rola nie istnieje, poinformuj admina
            await interaction.response.send_message("B≈ÇƒÖd: Rola 'Zweryfikowany' nie zosta≈Ça znaleziona. Skontaktuj siƒô z administratorem.", ephemeral=True)
            return

        # 2. Sprawd≈∫, czy u≈ºytkownik ju≈º ma tƒô rolƒô
        if role in interaction.user.roles:
            await interaction.response.send_message("Ju≈º jeste≈õ zweryfikowany!", ephemeral=True)
        else:
            # 3. Dodaj rolƒô u≈ºytkownikowi
            await interaction.user.add_roles(role)
            # 4. Wy≈õlij potwierdzenie widoczne tylko dla tego u≈ºytkownika
            await interaction.response.send_message("Gratulacje! Zosta≈Çe≈õ pomy≈õlnie zweryfikowany i masz teraz dostƒôp do reszty serwera.", ephemeral=True)

# --- ZDARZENIA ---
@bot.event
async def on_ready():
    print(f'Zalogowano jako {bot.user.name}')
    # Rejestrujemy nasz widok z przyciskiem, aby dzia≈Ça≈Ç po restarcie
    bot.add_view(VerificationView()) 
    print('Bot jest gotowy i system weryfikacji jest aktywny.')
    print('------')
    await bot.change_presence(activity=discord.Game(name="!pomoc"))

# --- KOMENDY ---

# Komendy !ping i !powiedz zostajƒÖ bez zmian
@bot.command()
async def ping(ctx):
    opoznienie = round(bot.latency * 1000)
    await ctx.send(f'Pong! üèì Moje op√≥≈∫nienie wynosi {opoznienie}ms.')

@bot.command()
async def powiedz(ctx, *, wiadomosc: str):
    await ctx.send(wiadomosc)
    await ctx.message.delete()

# --- NOWA KOMENDA: Tworzenie panelu weryfikacyjnego ---
@bot.command()
@commands.has_permissions(administrator=True) # Tylko admin mo≈ºe u≈ºyƒá tej komendy
async def stworz_weryfikacje(ctx):
    """Tworzy wiadomo≈õƒá z przyciskiem do weryfikacji."""
    embed = discord.Embed(
        title="Weryfikacja na serwerze",
        description="Witaj na naszym serwerze!\n\nAby uzyskaƒá dostƒôp do wszystkich kana≈Ç√≥w, kliknij przycisk poni≈ºej.",
        color=discord.Color.gold()
    )
    # Usuwamy wiadomo≈õƒá z komendƒÖ
    await ctx.message.delete()
    # Wysy≈Çamy wiadomo≈õƒá z embedem oraz naszym widokiem zawierajƒÖcym przycisk
    await ctx.send(embed=embed, view=VerificationView())

@stworz_weryfikacje.error
async def weryfikacja_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("Nie masz uprawnie≈Ñ do u≈ºycia tej komendy!", delete_after=10)
        await ctx.message.delete()


# Komenda !pomoc (teraz z nowƒÖ komendƒÖ)
bot.remove_command('help')
@bot.command()
async def pomoc(ctx):
    embed = discord.Embed(title="Pomoc Bota", color=discord.Color.blue())
    embed.add_field(name="!ping", value="Sprawdza op√≥≈∫nienie bota.", inline=False)
    embed.add_field(name="!powiedz <wiadomo≈õƒá>", value="Bot powtarza TwojƒÖ wiadomo≈õƒá.", inline=False)
    embed.add_field(name="!stworz_weryfikacje", value="[Admin] Tworzy panel weryfikacyjny.", inline=False)
    await ctx.send(embed=embed)

# Uruchomienie bota (bez zmian)
TOKEN = os.getenv("DISCORD_TOKEN")
if TOKEN is None:
    print("B≈ÅƒÑD: Nie znaleziono tokenu!")
else:
    bot.run(TOKEN)